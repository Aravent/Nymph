<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Nymph.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Nymph.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sun Apr 30 22:01:13 2017
<BR><P>
<H3>Maximum Stack Usage =       1376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USART3_IRQHandler &rArr; DJI::onboardSDK::CoreAPI::byteHandler(unsigned char) &rArr; DJI::onboardSDK::CoreAPI::streamHandler(DJI::onboardSDK::SDKFilter*, unsigned char) &rArr; DJI::onboardSDK::CoreAPI::checkStream(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::verifyHead(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::getFlightStatus() const &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">MemManage_Handler</a><BR>
 <LI><a href="#[a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UsageFault_Handler</a><BR>
 <LI><a href="#[c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SVC_Handler</a><BR>
 <LI><a href="#[d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DebugMon_Handler</a><BR>
 <LI><a href="#[e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">PendSV_Handler</a><BR>
 <LI><a href="#[22]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a]">BusFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[61]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[60]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9]">MemManage_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">SDIO_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from timer.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[64]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[12]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">TIM1_UP_TIM10_IRQHandler</a> from timer.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">TIM2_IRQHandler</a> from timer.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">USART2_IRQHandler</a> from receive.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">USART3_IRQHandler</a> from bspusart.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[63]">myRecvCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</a> from localnavigation.o(.text) referenced from main.o(.text)
 <LI><a href="#[139]">aes256_decrypt_ecb(tagAES256Context*, unsigned char*)</a> from dji_codec.o(.text) referenced 2 times from dji_codec.o(.text)
 <LI><a href="#[134]">aes256_encrypt_ecb(tagAES256Context*, unsigned char*)</a> from dji_codec.o(.text) referenced from dji_codec.o(.text)
 <LI><a href="#[6c]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[6b]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[80]">DJI::onboardSDK::HardDriver::displayLog(const char*)</a> from dji_harddriver.o(.text) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[80]">DJI::onboardSDK::HardDriver::displayLog(const char*)</a> from dji_harddriver.o(.text) referenced from dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
 <LI><a href="#[7f]">DJI::onboardSDK::HardDriver::nonBlockWait()</a> from driver.o(i._ZN3DJI10onboardSDK10HardDriver12nonBlockWaitEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[7f]">DJI::onboardSDK::HardDriver::nonBlockWait()</a> from driver.o(i._ZN3DJI10onboardSDK10HardDriver12nonBlockWaitEv) referenced from dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
 <LI><a href="#[7d]">DJI::onboardSDK::HardDriver::freeNonBlockCBAck()</a> from driver.o(i._ZN3DJI10onboardSDK10HardDriver17freeNonBlockCBAckEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[7d]">DJI::onboardSDK::HardDriver::freeNonBlockCBAck()</a> from driver.o(i._ZN3DJI10onboardSDK10HardDriver17freeNonBlockCBAckEv) referenced from dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
 <LI><a href="#[7c]">DJI::onboardSDK::HardDriver::lockNonBlockCBAck()</a> from driver.o(i._ZN3DJI10onboardSDK10HardDriver17lockNonBlockCBAckEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[7c]">DJI::onboardSDK::HardDriver::lockNonBlockCBAck()</a> from driver.o(i._ZN3DJI10onboardSDK10HardDriver17lockNonBlockCBAckEv) referenced from dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
 <LI><a href="#[7b]">DJI::onboardSDK::HardDriver::freeProtocolHeader()</a> from driver.o(i._ZN3DJI10onboardSDK10HardDriver18freeProtocolHeaderEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[7b]">DJI::onboardSDK::HardDriver::freeProtocolHeader()</a> from driver.o(i._ZN3DJI10onboardSDK10HardDriver18freeProtocolHeaderEv) referenced from dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
 <LI><a href="#[7a]">DJI::onboardSDK::HardDriver::lockProtocolHeader()</a> from driver.o(i._ZN3DJI10onboardSDK10HardDriver18lockProtocolHeaderEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[7a]">DJI::onboardSDK::HardDriver::lockProtocolHeader()</a> from driver.o(i._ZN3DJI10onboardSDK10HardDriver18lockProtocolHeaderEv) referenced from dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
 <LI><a href="#[7e]">DJI::onboardSDK::HardDriver::notifyNonBlockCBAckRecv()</a> from driver.o(i._ZN3DJI10onboardSDK10HardDriver23notifyNonBlockCBAckRecvEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[7e]">DJI::onboardSDK::HardDriver::notifyNonBlockCBAckRecv()</a> from driver.o(i._ZN3DJI10onboardSDK10HardDriver23notifyNonBlockCBAckRecvEv) referenced from dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
 <LI><a href="#[66]">DJI::onboardSDK::missionCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</a> from dji_mission.o(.text) referenced 2 times from dji_hotpoint.o(.text)
 <LI><a href="#[156]">DJI::onboardSDK::Flight::armCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</a> from dji_flight.o(.text) referenced from dji_flight.o(.text)
 <LI><a href="#[153]">DJI::onboardSDK::Flight::taskCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</a> from dji_flight.o(.text) referenced from dji_flight.o(.text)
 <LI><a href="#[10f]">DJI::onboardSDK::CoreAPI::activateCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</a> from dji_api.o(.text) referenced from dji_api.o(.text)
 <LI><a href="#[118]">DJI::onboardSDK::CoreAPI::setControlCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</a> from dji_api.o(.text) referenced 3 times from dji_api.o(.text)
 <LI><a href="#[11c]">DJI::onboardSDK::CoreAPI::sendToMobileCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</a> from dji_api.o(.text) referenced from dji_api.o(.text)
 <LI><a href="#[11d]">DJI::onboardSDK::CoreAPI::setFrequencyCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</a> from dji_api.o(.text) referenced from dji_api.o(.text)
 <LI><a href="#[122]">DJI::onboardSDK::CoreAPI::getDroneVersionCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</a> from dji_api.o(.text) referenced from dji_api.o(.text)
 <LI><a href="#[173]">DJI::onboardSDK::HotPoint::startCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</a> from dji_hotpoint.o(.text) referenced from dji_hotpoint.o(.text)
 <LI><a href="#[73]">STM32F4::freeMemory()</a> from driver.o(i._ZN7STM32F410freeMemoryEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[72]">STM32F4::lockMemory()</a> from driver.o(i._ZN7STM32F410lockMemoryEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[6f]">STM32F4::getTimeStamp()</a> from driver.o(.text) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[70]">STM32F4::send(const unsigned char*, unsigned)</a> from driver.o(.text) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[79]">STM32F4::wait(int)</a> from driver.o(i._ZN7STM32F44waitEi) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[78]">STM32F4::notify()</a> from driver.o(i._ZN7STM32F46notifyEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[77]">STM32F4::freeACK()</a> from driver.o(i._ZN7STM32F47freeACKEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[75]">STM32F4::freeMSG()</a> from driver.o(i._ZN7STM32F47freeMSGEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[76]">STM32F4::lockACK()</a> from driver.o(i._ZN7STM32F47lockACKEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[74]">STM32F4::lockMSG()</a> from driver.o(i._ZN7STM32F47lockMSGEv) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[71]">STM32F4::readall(unsigned char*, unsigned)</a> from driver.o(i._ZN7STM32F47readallEPhj) referenced from driver.o(.constdata__ZTV7STM32F4)
 <LI><a href="#[81]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 12 times from dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
 <LI><a href="#[65]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[84]">__sti___11_Receive_cpp_88bc3a46</a> from receive.o(.text) referenced from receive.o(.init_array)
 <LI><a href="#[83]">__sti___12_HotPoint_cpp_hotpoint</a> from hotpoint.o(.text) referenced from hotpoint.o(.init_array)
 <LI><a href="#[82]">__sti___8_main_cpp_BMP1</a> from main.o(.text) referenced from main.o(.init_array)
 <LI><a href="#[68]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[69]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[67]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[6e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[6d]">fputc</a> from cppforstm32.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[6a]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[62]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[65]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[1e2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[86]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c6]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[88]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1e4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1e7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6d]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cppforstm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[8e]"></a>crc32(char*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc32(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nymth()
</UL>

<P><STRONG><a name="[8b]"></a>nymth()</STRONG> (Thumb, 440 bytes, Stack size 328 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nymth() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32(char*, unsigned)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>tiger_sniffing()</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = tiger_sniffing() &rArr; DJI::onboardSDK::CoreAPI::sendToMobile(unsigned char*, unsigned char, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendToMobile(unsigned char*, unsigned char, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString(unsigned char, unsigned char, char*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>main</STRONG> (Thumb, 1936 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = main &rArr; TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*) &rArr; tryHotpoint(double, float, float) &rArr; DJI::onboardSDK::HotPoint::start(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendPoll()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastCallback(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreq(unsigned char*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDroneVersion(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendToMobile(unsigned char*, unsigned char, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms(unsigned short)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPinit()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mobileCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Receive_Msg(unsigned char*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString(unsigned char, unsigned char, char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Activate()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiger_sniffing()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nymth()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[9e]"></a>User_Activate()</STRONG> (Thumb, 34 bytes, Stack size 56 bytes, activate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = User_Activate() &rArr; DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mobileCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>VRC_TakeControl()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, virtualrc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = VRC_TakeControl() &rArr; DJI::onboardSDK::VirtualRC::setControl(bool, DJI::onboardSDK::VirtualRC::CutOff) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::setControl(bool, DJI::onboardSDK::VirtualRC::CutOff)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
</UL>

<P><STRONG><a name="[ac]"></a>VRCResetData()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, virtualrc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = VRCResetData() &rArr; DJI::onboardSDK::VirtualRC::setControl(bool, DJI::onboardSDK::VirtualRC::CutOff) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::setControl(bool, DJI::onboardSDK::VirtualRC::CutOff)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
</UL>

<P><STRONG><a name="[ad]"></a>tryHotpoint(double, float, float)</STRONG> (Thumb, 200 bytes, Stack size 464 bytes, hotpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = tryHotpoint(double, float, float) &rArr; DJI::onboardSDK::HotPoint::start(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::setRadius(double)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::start(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::setHotPoint(DJI::onboardSDK::GPSPositionData)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::setYawRate(float)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
</UL>

<P><STRONG><a name="[b5]"></a>stopHotpoint()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hotpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = stopHotpoint() &rArr; DJI::onboardSDK::HotPoint::stop(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::stop(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
</UL>

<P><STRONG><a name="[36]"></a>USART2_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)</STRONG> (Thumb, 800 bytes, Stack size 448 bytes, receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*) &rArr; tryHotpoint(double, float, float) &rArr; DJI::onboardSDK::HotPoint::start(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setControl(bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setFlight(DJI::onboardSDK::FlightData*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setArm(bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::task(DJI::onboardSDK::Flight::TASK, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startLocalNavExample()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopLocalNavExample()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Float(unsigned char, unsigned char)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopHotpoint()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryHotpoint(double, float, float)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VRCResetData()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VRC_TakeControl()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDroneVersion(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Activate()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>STM32F4::send(const unsigned char*, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STM32F4::send(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
</UL>
<P><STRONG><a name="[6f]"></a>STM32F4::getTimeStamp()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
</UL>
<P><STRONG><a name="[9f]"></a>mobileCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, mobilecommand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mobileCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*) &rArr; User_Activate() &rArr; DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setControl(bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setArm(bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::task(DJI::onboardSDK::Flight::TASK, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startLocalNavExample()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopLocalNavExample()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendToMobile(unsigned char*, unsigned char, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms(unsigned short)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Activate()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getSimpleACK() const
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>updateCurveFollowing()</STRONG> (Thumb, 278 bytes, Stack size 72 bytes, localnavigation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = updateCurveFollowing() &rArr; DJI::onboardSDK::Flight::setMovementControl(unsigned char, float, float, float, float) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setMovementControl(unsigned char, float, float, float, float)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_convert_ned(DJI::onboardSDK::PositionData, DJI::onboardSDK::PositionData)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRecvCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
</UL>

<P><STRONG><a name="[63]"></a>myRecvCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</STRONG> (Thumb, 192 bytes, Stack size 440 bytes, localnavigation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = myRecvCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*) &rArr; updateCurveFollowing() &rArr; DJI::onboardSDK::Flight::setMovementControl(unsigned char, float, float, float, float) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getFlightStatus() const
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCurveFollowing()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>startLocalNavExample()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, localnavigation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = startLocalNavExample() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mobileCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
</UL>

<P><STRONG><a name="[c1]"></a>stopLocalNavExample()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, localnavigation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mobileCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
</UL>

<P><STRONG><a name="[cb]"></a>USART2_Gpio_Config()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bspusart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART2_Gpio_Config() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config()
</UL>

<P><STRONG><a name="[cf]"></a>USART3_Gpio_Config()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bspusart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART3_Gpio_Config() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config()
</UL>

<P><STRONG><a name="[d0]"></a>USART1_Gpio_Config()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bspusart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART1_Gpio_Config() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config()
</UL>

<P><STRONG><a name="[d1]"></a>USART2_Config()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bspusart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART2_Config() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Gpio_Config()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartConfig()
</UL>

<P><STRONG><a name="[d6]"></a>USART1_Config()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bspusart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART1_Config() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Gpio_Config()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartConfig()
</UL>

<P><STRONG><a name="[d8]"></a>USART3_Config()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bspusart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART3_Config() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Gpio_Config()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartConfig()
</UL>

<P><STRONG><a name="[d9]"></a>USARTxNVIC_Config()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bspusart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USARTxNVIC_Config() &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartConfig()
</UL>

<P><STRONG><a name="[db]"></a>UsartConfig()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bspusart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UsartConfig() &rArr; USART3_Config() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTxNVIC_Config()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config()
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPinit()
</UL>

<P><STRONG><a name="[dc]"></a>USART1_IRQHandler()</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, bspusart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>

<P><STRONG><a name="[37]"></a>USART3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bspusart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = USART3_IRQHandler &rArr; DJI::onboardSDK::CoreAPI::byteHandler(unsigned char) &rArr; DJI::onboardSDK::CoreAPI::streamHandler(DJI::onboardSDK::SDKFilter*, unsigned char) &rArr; DJI::onboardSDK::CoreAPI::checkStream(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::verifyHead(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::getFlightStatus() const &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::byteHandler(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>BSPinit()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSPinit() &rArr; UsartConfig() &rArr; USART3_Config() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickConfig()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartConfig()
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>Timer1Config()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timer1Config() &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPinit()
</UL>

<P><STRONG><a name="[e1]"></a>Timer2Config()</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timer2Config() &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPinit()
</UL>

<P><STRONG><a name="[df]"></a>SystickConfig()</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystickConfig()
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPinit()
</UL>

<P><STRONG><a name="[9a]"></a>delay_nms(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mobileCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 120 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; DJI::onboardSDK::VirtualRC::sendData(DJI::onboardSDK::VirtualRCData) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::sendData(DJI::onboardSDK::VirtualRCData)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TIM2_IRQHandler &rArr; DJI::onboardSDK::Flight::setFlight(DJI::onboardSDK::FlightData*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setFlight(DJI::onboardSDK::FlightData*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTxNVIC_Config()
</UL>

<P><STRONG><a name="[da]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTxNVIC_Config()
</UL>

<P><STRONG><a name="[1e8]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[e7]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[19e]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[19f]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[1ea]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>CAN_SlaveStartBank</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>CAN_DBGFreeze</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>CAN_TTComModeCmd</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>CAN_Transmit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Send_Msg(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1a2]"></a>CAN_TransmitStatus</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Send_Msg(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1ee]"></a>CAN_CancelTransmit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Receive_Msg(unsigned char*)
</UL>

<P><STRONG><a name="[1ef]"></a>CAN_FIFORelease</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>CAN_MessagePending</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Receive_Msg(unsigned char*)
</UL>

<P><STRONG><a name="[1f0]"></a>CAN_OperatingModeRequest</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>CAN_Sleep</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>CAN_WakeUp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>CAN_GetLastErrorCode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>CAN_GetReceiveErrorCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>CAN_GetLSBTransmitErrorCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>CAN_GetFlagStatus</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>CAN_ClearFlag</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>CAN_GetITStatus</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>

<P><STRONG><a name="[1f9]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>GPIO_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[cd]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Gpio_Config()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Gpio_Config()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Gpio_Config()
</UL>

<P><STRONG><a name="[1fa]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a7]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[200]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Gpio_Config()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Gpio_Config()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Gpio_Config()
</UL>

<P><STRONG><a name="[203]"></a>RCC_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[ed]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[205]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[215]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>RCC_TIMCLKPresConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Gpio_Config()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Gpio_Config()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Gpio_Config()
</UL>

<P><STRONG><a name="[21a]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config()
</UL>

<P><STRONG><a name="[d7]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config()
</UL>

<P><STRONG><a name="[ec]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[21c]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[f0]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[21e]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[e2]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[227]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[233]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>TIM_OC3Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f7]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f5]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f3]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f1]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[256]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[257]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[260]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[e5]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[262]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[fb]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[fd]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[ff]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[fe]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[100]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[267]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>USART_DeInit</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[d3]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config()
</UL>

<P><STRONG><a name="[26d]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config()
</UL>

<P><STRONG><a name="[270]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F4::send(const unsigned char*, unsigned)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::parseFromMobileCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
</UL>

<P><STRONG><a name="[b8]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler()
</UL>

<P><STRONG><a name="[273]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config()
</UL>

<P><STRONG><a name="[89]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F4::send(const unsigned char*, unsigned)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::parseFromMobileCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
</UL>

<P><STRONG><a name="[280]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>USART_GetITStatus</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler()
</UL>

<P><STRONG><a name="[281]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[282]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>DJI::onboardSDK::CoreAPI::init(DJI::onboardSDK::HardDriver*, DJI::onboardSDK::CallBackHandler, bool)</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DJI::onboardSDK::CoreAPI::init(DJI::onboardSDK::HardDriver*, DJI::onboardSDK::CallBackHandler, bool) &rArr; DJI::onboardSDK::CoreAPI::setup()
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setup()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::CoreAPI(DJI::onboardSDK::HardDriver*, bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::CoreAPI(DJI::onboardSDK::HardDriver*, DJI::onboardSDK::CallBackHandler, bool)
</UL>

<P><STRONG><a name="[a5]"></a>DJI::onboardSDK::CoreAPI::CoreAPI(DJI::onboardSDK::HardDriver*, bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DJI::onboardSDK::CoreAPI::CoreAPI(DJI::onboardSDK::HardDriver*, bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::init(DJI::onboardSDK::HardDriver*, DJI::onboardSDK::CallBackHandler, bool) &rArr; DJI::onboardSDK::CoreAPI::setup()
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::init(DJI::onboardSDK::HardDriver*, DJI::onboardSDK::CallBackHandler, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_BMP1
</UL>

<P><STRONG><a name="[283]"></a>DJI::onboardSDK::CoreAPI::CoreAPI__sub_object(DJI::onboardSDK::HardDriver*, bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, dji_api.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>DJI::onboardSDK::CoreAPI::getFwVersion() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setMovementControl(unsigned char, float, float, float, float)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::CoreAPI(DJI::onboardSDK::HardDriver*, DJI::onboardSDK::CallBackHandler, bool)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getControlMode() const
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getStatus() const
</UL>

<P><STRONG><a name="[107]"></a>DJI::onboardSDK::CoreAPI::CoreAPI(DJI::onboardSDK::HardDriver*, DJI::onboardSDK::CallBackHandler, bool)</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getFwVersion() const
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::init(DJI::onboardSDK::HardDriver*, DJI::onboardSDK::CallBackHandler, bool)
</UL>

<P><STRONG><a name="[284]"></a>DJI::onboardSDK::CoreAPI::CoreAPI__sub_object(DJI::onboardSDK::HardDriver*, DJI::onboardSDK::CallBackHandler, bool)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, dji_api.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>DJI::onboardSDK::CoreAPI::ack(req_id_t, unsigned char*, int)</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::ackInterface(DJI::onboardSDK::Ack*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[10b]"></a>DJI::onboardSDK::CoreAPI::send(unsigned char, unsigned char, DJI::onboardSDK::CMD_SET, unsigned char, void*, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), int, int)</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[10d]"></a>DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setControl(bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setFlight(DJI::onboardSDK::FlightData*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setArm(bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::task(DJI::onboardSDK::Flight::TASK, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::start(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::stop(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::setControl(bool, DJI::onboardSDK::VirtualRC::CutOff)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreq(unsigned char*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDroneVersion(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendToMobile(unsigned char*, unsigned char, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::sendData(DJI::onboardSDK::VirtualRCData)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setMovementControl(unsigned char, float, float, float, float)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreq(unsigned char*, int)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setControl(bool, int)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setControlCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, int)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDroneVersion(int)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::sendData()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setSyncFreq(unsigned)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::readData(int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::readData(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::resetYaw(int)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::resetYaw(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::updateRadius(float, int)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::updateRadius(float, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::updateYawRate(DJI::onboardSDK::HotPoint::YawRate&, int)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::updateYawRate(DJI::onboardSDK::HotPoint::YawRate&, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::pause(bool, int)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::pause(bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::stop(int)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::start(int)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setArm(bool, int)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::task(DJI::onboardSDK::Flight::TASK, int)
</UL>

<P><STRONG><a name="[10e]"></a>DJI::onboardSDK::CoreAPI::send(DJI::onboardSDK::Command*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*)
</UL>

<P><STRONG><a name="[10f]"></a>DJI::onboardSDK::CoreAPI::activateCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</STRONG> (Thumb, 1092 bytes, Stack size 40 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DJI::onboardSDK::CoreAPI::activateCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*) &rArr; DJI::onboardSDK::CoreAPI::setKey(const char*) &rArr; transformTwoByte(const char*, unsigned char*) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setKey(const char*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastActivation(unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::decodeACKStatus(unsigned short)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_api.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Activate()
</UL>

<P><STRONG><a name="[114]"></a>DJI::onboardSDK::CoreAPI::parseDroneVersionInfo(unsigned char*)</STRONG> (Thumb, 3096 bytes, Stack size 152 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = DJI::onboardSDK::CoreAPI::parseDroneVersionInfo(unsigned char*) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDroneVersionCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDroneVersion(int)
</UL>

<P><STRONG><a name="[116]"></a>DJI::onboardSDK::CoreAPI::getDroneVersion(int)</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::parseDroneVersionInfo(unsigned char*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, int)
</UL>

<P><STRONG><a name="[117]"></a>DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, int)</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setKey(const char*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDroneVersion(int)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[118]"></a>DJI::onboardSDK::CoreAPI::setControlCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</STRONG> (Thumb, 882 bytes, Stack size 56 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = DJI::onboardSDK::CoreAPI::setControlCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::decodeACKStatus(unsigned short)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_api.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>DJI::onboardSDK::CoreAPI::setControl(bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = DJI::onboardSDK::CoreAPI::setControl(bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mobileCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
</UL>

<P><STRONG><a name="[119]"></a>DJI::onboardSDK::CoreAPI::setControl(bool, int)</STRONG> (Thumb, 516 bytes, Stack size 48 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[11a]"></a>DJI::onboardSDK::CoreAPI::getAccountData() const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[11b]"></a>DJI::onboardSDK::CoreAPI::setAccountData(const DJI::onboardSDK::ActivateData&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[11c]"></a>DJI::onboardSDK::CoreAPI::sendToMobileCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DJI::onboardSDK::CoreAPI::sendToMobileCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*) &rArr; DJI::onboardSDK::CoreAPI::decodeACKStatus(unsigned short) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::decodeACKStatus(unsigned short)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_api.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>DJI::onboardSDK::CoreAPI::sendToMobile(unsigned char*, unsigned char, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = DJI::onboardSDK::CoreAPI::sendToMobile(unsigned char*, unsigned char, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mobileCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiger_sniffing()
</UL>

<P><STRONG><a name="[11d]"></a>DJI::onboardSDK::CoreAPI::setFrequencyCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DJI::onboardSDK::CoreAPI::setFrequencyCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*) &rArr; DJI::onboardSDK::CoreAPI::decodeACKStatus(unsigned short) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::decodeACKStatus(unsigned short)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_api.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>DJI::onboardSDK::CoreAPI::setBroadcastFreq(unsigned char*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = DJI::onboardSDK::CoreAPI::setBroadcastFreq(unsigned char*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreqToZero()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreqDefaults()
</UL>

<P><STRONG><a name="[11e]"></a>DJI::onboardSDK::CoreAPI::setBroadcastFreq(unsigned char*, int)</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreqDefaults(int)
</UL>

<P><STRONG><a name="[11f]"></a>DJI::onboardSDK::CoreAPI::setBroadcastFreqDefaults()</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreq(unsigned char*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[120]"></a>DJI::onboardSDK::CoreAPI::setBroadcastFreqDefaults(int)</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreq(unsigned char*, int)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[121]"></a>DJI::onboardSDK::CoreAPI::setBroadcastFreqToZero()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreq(unsigned char*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[122]"></a>DJI::onboardSDK::CoreAPI::getDroneVersionCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DJI::onboardSDK::CoreAPI::getDroneVersionCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*) &rArr; DJI::onboardSDK::CoreAPI::parseDroneVersionInfo(unsigned char*) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::parseDroneVersionInfo(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_api.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>DJI::onboardSDK::CoreAPI::getDroneVersion(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = DJI::onboardSDK::CoreAPI::getDroneVersion(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>DJI::onboardSDK::CoreAPI::getHwVersion() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[285]"></a>DJI::onboardSDK::CoreAPI::getHwSerialNum() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_api.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>DJI::onboardSDK::CoreAPI::getTime() const</STRONG> (Thumb, 48 bytes, Stack size 424 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[ca]"></a>DJI::onboardSDK::CoreAPI::getFlightStatus() const</STRONG> (Thumb, 32 bytes, Stack size 416 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = DJI::onboardSDK::CoreAPI::getFlightStatus() const &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRecvCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[154]"></a>DJI::onboardSDK::CoreAPI::getDriver() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dji_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setMovementControl(unsigned char, float, float, float, float)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::readCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::startCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::missionCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::armCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::taskCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
</UL>

<P><STRONG><a name="[c2]"></a>DJI::onboardSDK::CoreAPI::getSimpleACK() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mobileCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
</UL>

<P><STRONG><a name="[286]"></a>DJI::onboardSDK::CoreAPI::setFromMobileCallback(DJI::onboardSDK::CallBackHandler)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dji_api.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>DJI::onboardSDK::CoreAPI::parseFromMobileCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</STRONG> (Thumb, 762 bytes, Stack size 32 bytes, dji_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DJI::onboardSDK::CoreAPI::parseFromMobileCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[125]"></a>DJI::onboardSDK::CoreAPI::getFilter() const</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dji_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[287]"></a>DJI::onboardSDK::CoreAPI::getHotPointData() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dji_api.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>DJI::onboardSDK::CoreAPI::getWayPointData() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dji_api.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>DJI::onboardSDK::CoreAPI::getFollowData() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dji_api.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>DJI::onboardSDK::CoreAPI::setHotPointData(bool)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_api.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>DJI::onboardSDK::CoreAPI::setWayPointData(bool)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_api.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>DJI::onboardSDK::CoreAPI::setFollowData(bool)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_api.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>DJI::onboardSDK::CoreAPI::setDriver(DJI::onboardSDK::HardDriver*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_api.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>getCmdSet(DJI::onboardSDK::Header*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dji_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[12e]"></a>getCmdCode(DJI::onboardSDK::Header*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dji_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[12a]"></a>DJI::onboardSDK::CoreAPI::setBroadcastFrameStatus(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[28e]"></a>DJI::onboardSDK::CoreAPI::getBroadcastFrameStatus()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_app.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>DJI::onboardSDK::CoreAPI::getBroadcastData() const</STRONG> (Thumb, 62 bytes, Stack size 216 bytes, dji_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryHotpoint(double, float, float)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRecvCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getFlightStatus() const
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setMovementControl(unsigned char, float, float, float, float)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBatteryCapacity() const
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getCtrlInfo() const
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getTime() const
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::isVirtualRC() const
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::getRCData() const
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::initData()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getPitch() const
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getRoll() const
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getYaw() const
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getControlMode() const
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getStatus() const
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getControlDevice() const
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getMagnet() const
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getYawRate() const
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getAcceleration() const
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getVelocity() const
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getPosition() const
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getEulerAngle() const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getQuaternion() const
</UL>

<P><STRONG><a name="[126]"></a>DJI::onboardSDK::CoreAPI::getCtrlInfo() const</STRONG> (Thumb, 40 bytes, Stack size 424 bytes, dji_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[127]"></a>DJI::onboardSDK::CoreAPI::getBatteryCapacity() const</STRONG> (Thumb, 32 bytes, Stack size 416 bytes, dji_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[9c]"></a>DJI::onboardSDK::CoreAPI::setBroadcastCallback(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dji_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28f]"></a>DJI::onboardSDK::CoreAPI::setFromMobileCallback(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dji_app.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*)</STRONG> (Thumb, 728 bytes, Stack size 472 bytes, dji_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::getFlightStatus() const &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getFlightStatus() const
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFrameStatus(bool)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getHwVersion() const
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passData(unsigned short, unsigned short&, void*, unsigned char*, unsigned, unsigned&)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[12c]"></a>DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*)</STRONG> (Thumb, 1154 bytes, Stack size 144 bytes, dji_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::getFlightStatus() const &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdCode(DJI::onboardSDK::Header*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdSet(DJI::onboardSDK::Header*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::ackInterface(DJI::onboardSDK::Ack*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::parseFromMobileCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[130]"></a>rj_xtime(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dji_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mixColumns_inv(unsigned char*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mixColumns(unsigned char*)
</UL>

<P><STRONG><a name="[136]"></a>aes_subBytes(unsigned char*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dji_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_encrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[13b]"></a>aes_subBytes_inv(unsigned char*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dji_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_decrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[138]"></a>aes_addRoundKey(unsigned char*, unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_addRoundKey(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_decrypt_ecb(tagAES256Context*, unsigned char*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_encrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[135]"></a>aes_addRoundKey_cpy(unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aes_addRoundKey_cpy(unsigned char*, unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_decrypt_ecb(tagAES256Context*, unsigned char*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_encrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[137]"></a>aes_shiftRows(unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dji_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_encrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[13a]"></a>aes_shiftRows_inv(unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dji_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_decrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[12f]"></a>aes_mixColumns(unsigned char*)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aes_mixColumns(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rj_xtime(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_encrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[131]"></a>aes_mixColumns_inv(unsigned char*)</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_mixColumns_inv(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rj_xtime(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_decrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[133]"></a>aes_expandEncKey(unsigned char*, unsigned char*)</STRONG> (Thumb, 244 bytes, Stack size 12 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_encrypt_ecb(tagAES256Context*, unsigned char*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_init(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[13c]"></a>aes_expandDecKey(unsigned char*, unsigned char*)</STRONG> (Thumb, 254 bytes, Stack size 12 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aes_expandDecKey(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_decrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[132]"></a>aes256_init(tagAES256Context*, unsigned char*)</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*))
</UL>

<P><STRONG><a name="[145]"></a>aes256_done(tagAES256Context*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dji_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*))
</UL>

<P><STRONG><a name="[134]"></a>aes256_encrypt_ecb(tagAES256Context*, unsigned char*)</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = aes256_encrypt_ecb(tagAES256Context*, unsigned char*) &rArr; aes_mixColumns(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_expandEncKey(unsigned char*, unsigned char*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mixColumns(unsigned char*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_shiftRows(unsigned char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_addRoundKey_cpy(unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_addRoundKey(unsigned char*, unsigned char*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_subBytes(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_codec.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>aes256_decrypt_ecb(tagAES256Context*, unsigned char*)</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = aes256_decrypt_ecb(tagAES256Context*, unsigned char*) &rArr; aes_mixColumns_inv(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_expandDecKey(unsigned char*, unsigned char*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mixColumns_inv(unsigned char*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_shiftRows_inv(unsigned char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_addRoundKey_cpy(unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_addRoundKey(unsigned char*, unsigned char*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_subBytes_inv(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_codec.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>crc16_update(unsigned short, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc16_update(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_crc16_calc(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[140]"></a>crc32_update(unsigned, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc32_update(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_crc32_calc(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[13d]"></a>sdk_stream_crc16_calc(const unsigned char*, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdk_stream_crc16_calc(const unsigned char*, unsigned) &rArr; crc16_update(unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_update(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::verifyHead(DJI::onboardSDK::SDKFilter*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateCRC(void*)
</UL>

<P><STRONG><a name="[13f]"></a>sdk_stream_crc32_calc(const unsigned char*, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdk_stream_crc32_calc(const unsigned char*, unsigned) &rArr; crc32_update(unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_update(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::verifyData(DJI::onboardSDK::SDKFilter*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateCRC(void*)
</UL>

<P><STRONG><a name="[141]"></a>sdk_stream_prepare_lambda(DJI::onboardSDK::SDKFilter*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdk_stream_prepare_lambda(DJI::onboardSDK::SDKFilter*) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*)
</UL>

<P><STRONG><a name="[144]"></a>encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*))</STRONG> (Thumb, 136 bytes, Stack size 136 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_done(tagAES256Context*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_init(tagAES256Context*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*)
</UL>

<P><STRONG><a name="[146]"></a>sdk_stream_shift_data_lambda(DJI::onboardSDK::SDKFilter*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_stream_shift_data_lambda(DJI::onboardSDK::SDKFilter*) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::verifyHead(DJI::onboardSDK::SDKFilter*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_update_reuse_part_lambda(DJI::onboardSDK::SDKFilter*)
</UL>

<P><STRONG><a name="[147]"></a>sdk_stream_update_reuse_part_lambda(DJI::onboardSDK::SDKFilter*)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdk_stream_update_reuse_part_lambda(DJI::onboardSDK::SDKFilter*) &rArr; sdk_stream_shift_data_lambda(DJI::onboardSDK::SDKFilter*) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_shift_data_lambda(DJI::onboardSDK::SDKFilter*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::verifyData(DJI::onboardSDK::SDKFilter*)
</UL>

<P><STRONG><a name="[148]"></a>calculateCRC(void*)</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = calculateCRC(void*) &rArr; sdk_stream_crc32_calc(const unsigned char*, unsigned) &rArr; crc32_update(unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_crc32_calc(const unsigned char*, unsigned)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_crc16_calc(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[149]"></a>transformTwoByte(const char*, unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = transformTwoByte(const char*, unsigned char*) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setKey(const char*)
</UL>

<P><STRONG><a name="[14b]"></a>DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::getFlightStatus() const &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*))
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_prepare_lambda(DJI::onboardSDK::SDKFilter*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::verifyHead(DJI::onboardSDK::SDKFilter*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::verifyData(DJI::onboardSDK::SDKFilter*)
</UL>

<P><STRONG><a name="[14d]"></a>DJI::onboardSDK::CoreAPI::verifyData(DJI::onboardSDK::SDKFilter*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = DJI::onboardSDK::CoreAPI::verifyData(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::getFlightStatus() const &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_update_reuse_part_lambda(DJI::onboardSDK::SDKFilter*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_crc32_calc(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::checkStream(DJI::onboardSDK::SDKFilter*)
</UL>

<P><STRONG><a name="[14e]"></a>DJI::onboardSDK::CoreAPI::verifyHead(DJI::onboardSDK::SDKFilter*)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = DJI::onboardSDK::CoreAPI::verifyHead(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::getFlightStatus() const &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_shift_data_lambda(DJI::onboardSDK::SDKFilter*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_crc16_calc(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::checkStream(DJI::onboardSDK::SDKFilter*)
</UL>

<P><STRONG><a name="[14f]"></a>DJI::onboardSDK::CoreAPI::checkStream(DJI::onboardSDK::SDKFilter*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = DJI::onboardSDK::CoreAPI::checkStream(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::verifyHead(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::getFlightStatus() const &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::verifyHead(DJI::onboardSDK::SDKFilter*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::verifyData(DJI::onboardSDK::SDKFilter*)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::streamHandler(DJI::onboardSDK::SDKFilter*, unsigned char)
</UL>

<P><STRONG><a name="[150]"></a>DJI::onboardSDK::CoreAPI::storeData(DJI::onboardSDK::SDKFilter*, unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DJI::onboardSDK::CoreAPI::storeData(DJI::onboardSDK::SDKFilter*, unsigned char) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::streamHandler(DJI::onboardSDK::SDKFilter*, unsigned char)
</UL>

<P><STRONG><a name="[151]"></a>DJI::onboardSDK::CoreAPI::streamHandler(DJI::onboardSDK::SDKFilter*, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = DJI::onboardSDK::CoreAPI::streamHandler(DJI::onboardSDK::SDKFilter*, unsigned char) &rArr; DJI::onboardSDK::CoreAPI::checkStream(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::verifyHead(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::getFlightStatus() const &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::storeData(DJI::onboardSDK::SDKFilter*, unsigned char)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::checkStream(DJI::onboardSDK::SDKFilter*)
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::byteHandler(unsigned char)
</UL>

<P><STRONG><a name="[de]"></a>DJI::onboardSDK::CoreAPI::byteHandler(unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = DJI::onboardSDK::CoreAPI::byteHandler(unsigned char) &rArr; DJI::onboardSDK::CoreAPI::streamHandler(DJI::onboardSDK::SDKFilter*, unsigned char) &rArr; DJI::onboardSDK::CoreAPI::checkStream(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::verifyHead(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*) &rArr; DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::getFlightStatus() const &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::streamHandler(DJI::onboardSDK::SDKFilter*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::readPoll()
</UL>

<P><STRONG><a name="[290]"></a>DJI::onboardSDK::CoreAPI::byteStreamHandler(unsigned char*, unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dji_codec.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>DJI::onboardSDK::CoreAPI::decodeACKStatus(unsigned short)</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DJI::onboardSDK::CoreAPI::decodeACKStatus(unsigned short) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setFrequencyCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendToMobileCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setControlCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activateCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
</UL>

<P><STRONG><a name="[110]"></a>DJI::onboardSDK::CoreAPI::setBroadcastActivation(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activateCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
</UL>

<P><STRONG><a name="[152]"></a>DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, dji_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateCRC(void*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*))
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::ackInterface(DJI::onboardSDK::Ack*)
</UL>

<P><STRONG><a name="[a6]"></a>DJI::onboardSDK::Flight::Flight(DJI::onboardSDK::CoreAPI*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dji_flight.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_BMP1
</UL>

<P><STRONG><a name="[291]"></a>DJI::onboardSDK::Flight::Flight__sub_object(DJI::onboardSDK::CoreAPI*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dji_flight.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>DJI::onboardSDK::Flight::taskCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, dji_flight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DJI::onboardSDK::Flight::taskCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDriver() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_flight.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>DJI::onboardSDK::Flight::task(DJI::onboardSDK::Flight::TASK, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, dji_flight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = DJI::onboardSDK::Flight::task(DJI::onboardSDK::Flight::TASK, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mobileCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
</UL>

<P><STRONG><a name="[155]"></a>DJI::onboardSDK::Flight::task(DJI::onboardSDK::Flight::TASK, int)</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[156]"></a>DJI::onboardSDK::Flight::armCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, dji_flight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DJI::onboardSDK::Flight::armCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDriver() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_flight.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>DJI::onboardSDK::Flight::setArm(bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, dji_flight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = DJI::onboardSDK::Flight::setArm(bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mobileCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
</UL>

<P><STRONG><a name="[157]"></a>DJI::onboardSDK::Flight::setArm(bool, int)</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[bc]"></a>DJI::onboardSDK::Flight::setFlight(DJI::onboardSDK::FlightData*)</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, dji_flight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = DJI::onboardSDK::Flight::setFlight(DJI::onboardSDK::FlightData*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::control(unsigned char, float, float, float, float)
</UL>

<P><STRONG><a name="[158]"></a>DJI::onboardSDK::Flight::control(unsigned char, float, float, float, float)</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setFlight(DJI::onboardSDK::FlightData*)
</UL>

<P><STRONG><a name="[c8]"></a>DJI::onboardSDK::Flight::setMovementControl(unsigned char, float, float, float, float)</STRONG> (Thumb, 564 bytes, Stack size 496 bytes, dji_flight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = DJI::onboardSDK::Flight::setMovementControl(unsigned char, float, float, float, float) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDriver() const
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getFwVersion() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCurveFollowing()
</UL>

<P><STRONG><a name="[159]"></a>DJI::onboardSDK::Flight::getQuaternion() const</STRONG> (Thumb, 56 bytes, Stack size 432 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[15a]"></a>DJI::onboardSDK::Flight::toEulerAngle(DJI::onboardSDK::QuaternionData)</STRONG> (Thumb, 546 bytes, Stack size 120 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getPitch() const
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getRoll() const
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getYaw() const
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getEulerAngle() const
</UL>

<P><STRONG><a name="[161]"></a>DJI::onboardSDK::Flight::getEulerAngle() const</STRONG> (Thumb, 84 bytes, Stack size 456 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[162]"></a>DJI::onboardSDK::Flight::getPosition() const</STRONG> (Thumb, 40 bytes, Stack size 424 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[163]"></a>DJI::onboardSDK::Flight::getVelocity() const</STRONG> (Thumb, 42 bytes, Stack size 424 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[164]"></a>DJI::onboardSDK::Flight::getAcceleration() const</STRONG> (Thumb, 58 bytes, Stack size 432 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[165]"></a>DJI::onboardSDK::Flight::getYawRate() const</STRONG> (Thumb, 40 bytes, Stack size 416 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[166]"></a>DJI::onboardSDK::Flight::getMagnet() const</STRONG> (Thumb, 42 bytes, Stack size 424 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[167]"></a>DJI::onboardSDK::Flight::getControlDevice() const</STRONG> (Thumb, 42 bytes, Stack size 424 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[168]"></a>DJI::onboardSDK::Flight::getStatus() const</STRONG> (Thumb, 52 bytes, Stack size 424 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getFwVersion() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[169]"></a>DJI::onboardSDK::Flight::getControlMode() const</STRONG> (Thumb, 54 bytes, Stack size 424 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getFwVersion() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[16a]"></a>DJI::onboardSDK::Flight::getYaw() const</STRONG> (Thumb, 76 bytes, Stack size 464 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[16b]"></a>DJI::onboardSDK::Flight::getRoll() const</STRONG> (Thumb, 76 bytes, Stack size 464 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[16c]"></a>DJI::onboardSDK::Flight::getPitch() const</STRONG> (Thumb, 76 bytes, Stack size 464 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[16d]"></a>DJI::onboardSDK::Flight::toEulerianAngle(DJI::onboardSDK::QuaternionData)</STRONG> (Thumb, 522 bytes, Stack size 120 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[16e]"></a>DJI::onboardSDK::Flight::toQuaternion(DJI::EulerianAngle)</STRONG> (Thumb, 702 bytes, Stack size 128 bytes, dji_flight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[292]"></a>DJI::onboardSDK::Flight::getApi() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_flight.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>DJI::onboardSDK::Flight::setApi(DJI::onboardSDK::CoreAPI*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dji_flight.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>DJI::onboardSDK::HardDriver::displayLog(const char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dji_harddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DJI::onboardSDK::HardDriver::displayLog(const char*) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
<LI> dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
</UL>
<P><STRONG><a name="[172]"></a>DJI::onboardSDK::HotPoint::initData()</STRONG> (Thumb, 190 bytes, Stack size 448 bytes, dji_hotpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = DJI::onboardSDK::HotPoint::initData() &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::HotPoint(DJI::onboardSDK::CoreAPI*)
</UL>

<P><STRONG><a name="[b7]"></a>DJI::onboardSDK::HotPoint::HotPoint(DJI::onboardSDK::CoreAPI*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dji_hotpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = DJI::onboardSDK::HotPoint::HotPoint(DJI::onboardSDK::CoreAPI*) &rArr; DJI::onboardSDK::HotPoint::initData() &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::initData()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_HotPoint_cpp_hotpoint
</UL>

<P><STRONG><a name="[294]"></a>DJI::onboardSDK::HotPoint::HotPoint__sub_object(DJI::onboardSDK::CoreAPI*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dji_hotpoint.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>DJI::onboardSDK::HotPoint::startCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, dji_hotpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DJI::onboardSDK::HotPoint::startCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*) &rArr; DJI::onboardSDK::CoreAPI::decodeMissionStatus(unsigned char) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDriver() const
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::decodeMissionStatus(unsigned char)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_hotpoint.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>DJI::onboardSDK::HotPoint::start(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, dji_hotpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = DJI::onboardSDK::HotPoint::start(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryHotpoint(double, float, float)
</UL>

<P><STRONG><a name="[175]"></a>DJI::onboardSDK::HotPoint::start(int)</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[b6]"></a>DJI::onboardSDK::HotPoint::stop(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, dji_hotpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = DJI::onboardSDK::HotPoint::stop(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopHotpoint()
</UL>

<P><STRONG><a name="[176]"></a>DJI::onboardSDK::HotPoint::stop(int)</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[177]"></a>DJI::onboardSDK::HotPoint::pause(bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[178]"></a>DJI::onboardSDK::HotPoint::pause(bool, int)</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[179]"></a>DJI::onboardSDK::HotPoint::updateYawRate(DJI::onboardSDK::HotPoint::YawRate&, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::updateYawRate(float, bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[17a]"></a>DJI::onboardSDK::HotPoint::updateYawRate(DJI::onboardSDK::HotPoint::YawRate&, int)</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[17b]"></a>DJI::onboardSDK::HotPoint::updateYawRate(float, bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::updateYawRate(DJI::onboardSDK::HotPoint::YawRate&, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[17c]"></a>DJI::onboardSDK::HotPoint::updateRadius(float, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[17d]"></a>DJI::onboardSDK::HotPoint::updateRadius(float, int)</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[17e]"></a>DJI::onboardSDK::HotPoint::resetYaw(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[17f]"></a>DJI::onboardSDK::HotPoint::resetYaw(int)</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[180]"></a>DJI::onboardSDK::HotPoint::readData(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[181]"></a>DJI::onboardSDK::HotPoint::readData(int)</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[182]"></a>DJI::onboardSDK::HotPoint::setData(const DJI::onboardSDK::HotPointData&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[295]"></a>DJI::onboardSDK::HotPoint::setHotPoint(double, double, double)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dji_hotpoint.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>DJI::onboardSDK::HotPoint::setHotPoint(DJI::onboardSDK::GPSPositionData)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dji_hotpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DJI::onboardSDK::HotPoint::setHotPoint(DJI::onboardSDK::GPSPositionData)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryHotpoint(double, float, float)
</UL>

<P><STRONG><a name="[b3]"></a>DJI::onboardSDK::HotPoint::setRadius(double)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dji_hotpoint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryHotpoint(double, float, float)
</UL>

<P><STRONG><a name="[b1]"></a>DJI::onboardSDK::HotPoint::setYawRate(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dji_hotpoint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryHotpoint(double, float, float)
</UL>

<P><STRONG><a name="[296]"></a>DJI::onboardSDK::HotPoint::setClockwise(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_hotpoint.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>DJI::onboardSDK::HotPoint::setCameraView(DJI::onboardSDK::HotPoint::View)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_hotpoint.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>DJI::onboardSDK::HotPoint::setYawMode(DJI::onboardSDK::HotPoint::YawMode)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_hotpoint.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>DJI::onboardSDK::HotPoint::getData() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[184]"></a>DJI::onboardSDK::HotPoint::readCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</STRONG> (Thumb, 250 bytes, Stack size 96 bytes, dji_hotpoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDriver() const
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::decodeMissionStatus(unsigned char)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[18d]"></a>calculateLength(unsigned short, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, dji_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calculateLength(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::ackInterface(DJI::onboardSDK::Ack*)
</UL>

<P><STRONG><a name="[185]"></a>DJI::onboardSDK::CoreAPI::sendData(unsigned char*)</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, dji_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DJI::onboardSDK::CoreAPI::sendData(unsigned char*) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendPoll()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::ackInterface(DJI::onboardSDK::Ack*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[a1]"></a>DJI::onboardSDK::CoreAPI::sendPoll()</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, dji_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DJI::onboardSDK::CoreAPI::sendPoll() &rArr; DJI::onboardSDK::CoreAPI::sendData(unsigned char*) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::freeSession(DJI::onboardSDK::CMDSession*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendData(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>DJI::onboardSDK::CoreAPI::readPoll()</STRONG> (Thumb, 56 bytes, Stack size 1040 bytes, dji_link.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::byteHandler(unsigned char)
</UL>

<P><STRONG><a name="[299]"></a>DJI::onboardSDK::CoreAPI::callbackPoll(DJI::onboardSDK::CoreAPI*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dji_link.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>DJI::onboardSDK::CoreAPI::allocateACK(DJI::onboardSDK::Header*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dji_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DJI::onboardSDK::CoreAPI::allocateACK(DJI::onboardSDK::Header*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::notifyNonBlockingCaller(DJI::onboardSDK::Header*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::notifyCaller(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[189]"></a>DJI::onboardSDK::CoreAPI::notifyCaller(DJI::onboardSDK::Header*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dji_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DJI::onboardSDK::CoreAPI::notifyCaller(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::allocateACK(DJI::onboardSDK::Header*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocateACK(DJI::onboardSDK::Header*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[18a]"></a>DJI::onboardSDK::CoreAPI::notifyNonBlockingCaller(DJI::onboardSDK::Header*)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dji_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DJI::onboardSDK::CoreAPI::notifyNonBlockingCaller(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::allocateACK(DJI::onboardSDK::Header*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocateACK(DJI::onboardSDK::Header*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[29a]"></a>DJI::onboardSDK::CoreAPI::setActivation(bool)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dji_link.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>DJI::onboardSDK::CoreAPI::setACKFrameStatus(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[29b]"></a>DJI::onboardSDK::CoreAPI::getACKFrameStatus()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_link.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>DJI::onboardSDK::CoreAPI::setSyncFreq(unsigned)</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, dji_link.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>

<P><STRONG><a name="[112]"></a>DJI::onboardSDK::CoreAPI::setKey(const char*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dji_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DJI::onboardSDK::CoreAPI::setKey(const char*) &rArr; transformTwoByte(const char*, unsigned char*) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transformTwoByte(const char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, int)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activateCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
</UL>

<P><STRONG><a name="[14c]"></a>DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*)</STRONG> (Thumb, 846 bytes, Stack size 32 bytes, dji_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*) &rArr; DJI::onboardSDK::CoreAPI::getFlightStatus() const &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::freeSession(DJI::onboardSDK::CMDSession*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setACKFrameStatus(unsigned)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::notifyNonBlockingCaller(DJI::onboardSDK::Header*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::notifyCaller(DJI::onboardSDK::Header*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendData(unsigned char*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::callApp(DJI::onboardSDK::SDKFilter*)
</UL>

<P><STRONG><a name="[10c]"></a>DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*)</STRONG> (Thumb, 2406 bytes, Stack size 48 bytes, dji_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocSession(unsigned short, unsigned short)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::freeSession(DJI::onboardSDK::CMDSession*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendData(unsigned char*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateLength(unsigned short, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(DJI::onboardSDK::Command*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, unsigned char, DJI::onboardSDK::CMD_SET, unsigned char, void*, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), int, int)
</UL>

<P><STRONG><a name="[10a]"></a>DJI::onboardSDK::CoreAPI::ackInterface(DJI::onboardSDK::Ack*)</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, dji_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DJI::onboardSDK::CoreAPI::ackInterface(DJI::onboardSDK::Ack*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocACK(unsigned short, unsigned short)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendData(unsigned char*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateLength(unsigned short, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::ack(req_id_t, unsigned char*, int)
</UL>

<P><STRONG><a name="[106]"></a>DJI::onboardSDK::CoreAPI::setup()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dji_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DJI::onboardSDK::CoreAPI::setup()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setupMMU()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setupSession()
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::init(DJI::onboardSDK::HardDriver*, DJI::onboardSDK::CallBackHandler, bool)
</UL>

<P><STRONG><a name="[193]"></a>freeMemory(DJI::onboardSDK::MMU_Tab*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dji_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::freeACK(DJI::onboardSDK::ACKSession*)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::freeSession(DJI::onboardSDK::CMDSession*)
</UL>

<P><STRONG><a name="[190]"></a>DJI::onboardSDK::CoreAPI::setupMMU()</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, dji_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setup()
</UL>

<P><STRONG><a name="[191]"></a>DJI::onboardSDK::CoreAPI::setupSession()</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, dji_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setup()
</UL>

<P><STRONG><a name="[192]"></a>DJI::onboardSDK::CoreAPI::allocMemory(unsigned short)</STRONG> (Thumb, 872 bytes, Stack size 80 bytes, dji_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DJI::onboardSDK::CoreAPI::allocMemory(unsigned short) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocACK(unsigned short, unsigned short)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocSession(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[186]"></a>DJI::onboardSDK::CoreAPI::freeSession(DJI::onboardSDK::CMDSession*)</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, dji_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DJI::onboardSDK::CoreAPI::freeSession(DJI::onboardSDK::CMDSession*)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMemory(DJI::onboardSDK::MMU_Tab*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendPoll()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[18e]"></a>DJI::onboardSDK::CoreAPI::allocSession(unsigned short, unsigned short)</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, dji_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DJI::onboardSDK::CoreAPI::allocSession(unsigned short, unsigned short) &rArr; DJI::onboardSDK::CoreAPI::allocMemory(unsigned short) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocMemory(unsigned short)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*)
</UL>

<P><STRONG><a name="[194]"></a>DJI::onboardSDK::CoreAPI::freeACK(DJI::onboardSDK::ACKSession*)</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, dji_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DJI::onboardSDK::CoreAPI::freeACK(DJI::onboardSDK::ACKSession*)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMemory(DJI::onboardSDK::MMU_Tab*)
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocACK(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[18f]"></a>DJI::onboardSDK::CoreAPI::allocACK(unsigned short, unsigned short)</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, dji_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DJI::onboardSDK::CoreAPI::allocACK(unsigned short, unsigned short) &rArr; DJI::onboardSDK::CoreAPI::allocMemory(unsigned short) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::freeACK(DJI::onboardSDK::ACKSession*)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocMemory(unsigned short)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::ackInterface(DJI::onboardSDK::Ack*)
</UL>

<P><STRONG><a name="[29c]"></a>DJI::onboardSDK::CoreAPI::setWayPointEventCallback(DJI::onboardSDK::CallBackHandler)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dji_mission.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>DJI::onboardSDK::CoreAPI::setMisssionCallback(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dji_mission.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>DJI::onboardSDK::CoreAPI::setHotPointCallback(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dji_mission.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>DJI::onboardSDK::CoreAPI::setWayPointCallback(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dji_mission.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>DJI::onboardSDK::CoreAPI::setFollowCallback(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dji_mission.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>DJI::onboardSDK::CoreAPI::setWayPointEventCallback(void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dji_mission.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>DJI::onboardSDK::CoreAPI::decodeMissionStatus(unsigned char)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, dji_mission.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DJI::onboardSDK::CoreAPI::decodeMissionStatus(unsigned char) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::readCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::startCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::missionCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
</UL>

<P><STRONG><a name="[66]"></a>DJI::onboardSDK::missionCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, dji_mission.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DJI::onboardSDK::missionCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*) &rArr; DJI::onboardSDK::CoreAPI::decodeMissionStatus(unsigned char) &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDriver() const
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::decodeMissionStatus(unsigned char)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_hotpoint.o(.text)
</UL>
<P><STRONG><a name="[195]"></a>DJI::onboardSDK::VirtualRC::resetData()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dji_virtualrc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::VirtualRC(DJI::onboardSDK::CoreAPI*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::neutralVRCSticks()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::sendSafeModeData()
</UL>

<P><STRONG><a name="[a7]"></a>DJI::onboardSDK::VirtualRC::VirtualRC(DJI::onboardSDK::CoreAPI*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dji_virtualrc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DJI::onboardSDK::VirtualRC::VirtualRC(DJI::onboardSDK::CoreAPI*)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::resetData()
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_BMP1
</UL>

<P><STRONG><a name="[2a2]"></a>DJI::onboardSDK::VirtualRC::VirtualRC__sub_object(DJI::onboardSDK::CoreAPI*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dji_virtualrc.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>DJI::onboardSDK::VirtualRC::setControl(bool, DJI::onboardSDK::VirtualRC::CutOff)</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, dji_virtualrc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = DJI::onboardSDK::VirtualRC::setControl(bool, DJI::onboardSDK::VirtualRC::CutOff) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VRCResetData()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VRC_TakeControl()
</UL>

<P><STRONG><a name="[e6]"></a>DJI::onboardSDK::VirtualRC::sendData(DJI::onboardSDK::VirtualRCData)</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, dji_virtualrc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = DJI::onboardSDK::VirtualRC::sendData(DJI::onboardSDK::VirtualRCData) &rArr; DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*) &rArr; DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; encodeData(DJI::onboardSDK::SDKFilter*, DJI::onboardSDK::Header*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>DJI::onboardSDK::VirtualRC::sendData()</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, dji_virtualrc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::neutralVRCSticks()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::sendSafeModeData()
</UL>

<P><STRONG><a name="[197]"></a>DJI::onboardSDK::VirtualRC::sendSafeModeData()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dji_virtualrc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::sendData()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::resetData()
</UL>

<P><STRONG><a name="[198]"></a>DJI::onboardSDK::VirtualRC::neutralVRCSticks()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dji_virtualrc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::sendData()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::resetData()
</UL>

<P><STRONG><a name="[199]"></a>DJI::onboardSDK::VirtualRC::getVRCData() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dji_virtualrc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[19a]"></a>DJI::onboardSDK::VirtualRC::getRCData() const</STRONG> (Thumb, 48 bytes, Stack size 424 bytes, dji_virtualrc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[19b]"></a>DJI::onboardSDK::VirtualRC::setVRCData(const DJI::onboardSDK::VirtualRCData&)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dji_virtualrc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[19c]"></a>DJI::onboardSDK::VirtualRC::isVirtualRC() const</STRONG> (Thumb, 42 bytes, Stack size 424 bytes, dji_virtualrc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2a3]"></a>DJI::onboardSDK::VirtualRC::toRadioData(DJI::onboardSDK::VirtualRCData&)</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, dji_virtualrc.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>DJI::onboardSDK::VirtualRC::toRCData(DJI::onboardSDK::VirtualRCData&)</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, dji_virtualrc.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>DJI::onboardSDK::VirtualRC::toVirtualRCData(DJI::onboardSDK::RadioData&)</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, dji_virtualrc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2a5]"></a>DJI::onboardSDK::VirtualRC::getApi() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_virtualrc.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>DJI::onboardSDK::VirtualRC::setApi(DJI::onboardSDK::CoreAPI*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dji_virtualrc.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>CAN1_Mode_Init(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char)</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CAN1_Mode_Init(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char) &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>CAN1_Send_Msg(unsigned char*, unsigned char)</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>

<P><STRONG><a name="[a3]"></a>CAN1_Receive_Msg(unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN1_Receive_Msg(unsigned char*) &rArr; CAN_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessagePending
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>OLED_WR_Byte(unsigned char, unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese(unsigned char, unsigned char, unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar(unsigned char, unsigned char, unsigned char)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Off()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a8]"></a>OLED_Set_Pos(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Set_Pos(unsigned char, unsigned char) &rArr; OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCHinese(unsigned char, unsigned char, unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a9]"></a>OLED_Display_On()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1aa]"></a>OLED_Display_Off()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[91]"></a>OLED_Clear()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Clear() &rArr; OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiger_sniffing()
</UL>

<P><STRONG><a name="[1ab]"></a>OLED_ShowChar(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; OLED_Set_Pos(unsigned char, unsigned char) &rArr; OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos(unsigned char, unsigned char)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString(unsigned char, unsigned char, char*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ac]"></a>oled_pow(unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oled_pow(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[93]"></a>OLED_ShowNum(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_ShowNum(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; OLED_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; OLED_Set_Pos(unsigned char, unsigned char) &rArr; OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_pow(unsigned char, unsigned char)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiger_sniffing()
</UL>

<P><STRONG><a name="[92]"></a>OLED_ShowString(unsigned char, unsigned char, char*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowString(unsigned char, unsigned char, char*) &rArr; OLED_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; OLED_Set_Pos(unsigned char, unsigned char) &rArr; OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiger_sniffing()
</UL>

<P><STRONG><a name="[a2]"></a>OLED_ShowCHinese(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_ShowCHinese(unsigned char, unsigned char, unsigned char) &rArr; OLED_Set_Pos(unsigned char, unsigned char) &rArr; OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos(unsigned char, unsigned char)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>OLED_DrawBMP(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_DrawBMP(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; OLED_Set_Pos(unsigned char, unsigned char) &rArr; OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos(unsigned char, unsigned char)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>OLED_Init()</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Init() &rArr; OLED_Clear() &rArr; OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos(unsigned char, unsigned char)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a7]"></a>OLED_DrawPoint(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, oled.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>OLED_Refresh_Gram()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[94]"></a>delay_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a8]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>delay_xms(unsigned short)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[1ad]"></a>delay_ms</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init()
</UL>

<P><STRONG><a name="[c4]"></a>arm_cos_f32</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, arm_cos_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCurveFollowing()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_convert_ned_rad(float&, float&, float, float, float, float)
</UL>

<P><STRONG><a name="[c9]"></a>arm_sin_f32</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, arm_sin_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCurveFollowing()
</UL>

<P><STRONG><a name="[2a9]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VRC_TakeControl()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRecvCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCurveFollowing()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getFilter() const
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setAccountData(const DJI::onboardSDK::ActivateData&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getAccountData() const
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, int)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getDroneVersion(int)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::parseDroneVersionInfo(unsigned char*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, bool, DJI::onboardSDK::CMD_SET, unsigned char, void*, unsigned, int, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::send(unsigned char, unsigned char, DJI::onboardSDK::CMD_SET, unsigned char, void*, int, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), int, int)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::ack(req_id_t, unsigned char*, int)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::toVirtualRCData(DJI::onboardSDK::RadioData&)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::setVRCData(const DJI::onboardSDK::VirtualRCData&)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::getVRCData() const
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::readCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::getData() const
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::setData(const DJI::onboardSDK::HotPointData&)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getPitch() const
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getRoll() const
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getYaw() const
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getVelocity() const
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getPosition() const
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getEulerAngle() const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getQuaternion() const
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passData(unsigned short, unsigned short&, void*, unsigned char*, unsigned, unsigned&)
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBroadcastData() const
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryHotpoint(double, float, float)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRecvCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::sendData(DJI::onboardSDK::VirtualRCData)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getFlightStatus() const
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setMovementControl(unsigned char, float, float, float, float)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCurveFollowing()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getBatteryCapacity() const
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getCtrlInfo() const
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::getTime() const
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setFrequencyCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendToMobileCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setControlCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activateCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::isVirtualRC() const
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::getRCData() const
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocateACK(DJI::onboardSDK::Header*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::readCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::startCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::initData()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::missionCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getPitch() const
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getRoll() const
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getYaw() const
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getControlMode() const
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getStatus() const
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getControlDevice() const
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getMagnet() const
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getYawRate() const
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getAcceleration() const
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getVelocity() const
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getPosition() const
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getEulerAngle() const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::getQuaternion() const
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::armCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::taskCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocMemory(unsigned short)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_update_reuse_part_lambda(DJI::onboardSDK::SDKFilter*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_shift_data_lambda(DJI::onboardSDK::SDKFilter*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_prepare_lambda(DJI::onboardSDK::SDKFilter*)
</UL>

<P><STRONG><a name="[2aa]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2ac]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::storeData(DJI::onboardSDK::SDKFilter*, unsigned char)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_prepare_lambda(DJI::onboardSDK::SDKFilter*)
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::parseDroneVersionInfo(unsigned char*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::init(DJI::onboardSDK::HardDriver*, DJI::onboardSDK::CallBackHandler, bool)
</UL>

<P><STRONG><a name="[2ae]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nymth()
</UL>

<P><STRONG><a name="[115]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreq(unsigned char*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreqDefaults(int)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreqDefaults()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setBroadcastFreq(unsigned char*, int)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::parseDroneVersionInfo(unsigned char*)
</UL>

<P><STRONG><a name="[14a]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transformTwoByte(const char*, unsigned char*)
</UL>

<P><STRONG><a name="[1b4]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[85]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toQuaternion(DJI::EulerianAngle)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerianAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toQuaternion(DJI::EulerianAngle)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toQuaternion(DJI::EulerianAngle)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerianAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryHotpoint(double, float, float)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::startCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::initData()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerianAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerAngle(DJI::onboardSDK::QuaternionData)
</UL>

<P><STRONG><a name="[2af]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerianAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerAngle(DJI::onboardSDK::QuaternionData)
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerianAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_convert_ned(DJI::onboardSDK::PositionData, DJI::onboardSDK::PositionData)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toQuaternion(DJI::EulerianAngle)
</UL>

<P><STRONG><a name="[6c]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[2b0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2b1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2b2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[1b3]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[67]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[2b3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[1cf]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[2b4]"></a>__aeabi_unwind_cpp_pr0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>__aeabi_unwind_cpp_pr1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>_Unwind_DeleteException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>_Unwind_Activity</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>_Unwind_RaiseException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cpp_unwinder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1bb]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2b9]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1b8]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1bc]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[1c2]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[87]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2ba]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2bb]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1bf]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[1c8]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1c5]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2bc]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[2be]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>passData(unsigned short, unsigned short&, void*, unsigned char*, unsigned, unsigned&)</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, dji_app.o(i._Z8passDatatRtPvPhjRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = passData(unsigned short, unsigned short&, void*, unsigned char*, unsigned, unsigned&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::broadcast(DJI::onboardSDK::Header*)
</UL>

<P><STRONG><a name="[7f]"></a>DJI::onboardSDK::HardDriver::nonBlockWait()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN3DJI10onboardSDK10HardDriver12nonBlockWaitEv))
<BR>[Address Reference Count : 2]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
<LI> dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
</UL>
<P><STRONG><a name="[7d]"></a>DJI::onboardSDK::HardDriver::freeNonBlockCBAck()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN3DJI10onboardSDK10HardDriver17freeNonBlockCBAckEv))
<BR>[Address Reference Count : 2]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
<LI> dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
</UL>
<P><STRONG><a name="[7c]"></a>DJI::onboardSDK::HardDriver::lockNonBlockCBAck()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN3DJI10onboardSDK10HardDriver17lockNonBlockCBAckEv))
<BR>[Address Reference Count : 2]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
<LI> dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
</UL>
<P><STRONG><a name="[7b]"></a>DJI::onboardSDK::HardDriver::freeProtocolHeader()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN3DJI10onboardSDK10HardDriver18freeProtocolHeaderEv))
<BR>[Address Reference Count : 2]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
<LI> dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
</UL>
<P><STRONG><a name="[7a]"></a>DJI::onboardSDK::HardDriver::lockProtocolHeader()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN3DJI10onboardSDK10HardDriver18lockProtocolHeaderEv))
<BR>[Address Reference Count : 2]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
<LI> dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
</UL>
<P><STRONG><a name="[7e]"></a>DJI::onboardSDK::HardDriver::notifyNonBlockCBAckRecv()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN3DJI10onboardSDK10HardDriver23notifyNonBlockCBAckRecvEv))
<BR>[Address Reference Count : 2]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
<LI> dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
</UL>
<P><STRONG><a name="[73]"></a>STM32F4::freeMemory()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN7STM32F410freeMemoryEv))
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
</UL>
<P><STRONG><a name="[72]"></a>STM32F4::lockMemory()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN7STM32F410lockMemoryEv))
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
</UL>
<P><STRONG><a name="[79]"></a>STM32F4::wait(int)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN7STM32F44waitEi))
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
</UL>
<P><STRONG><a name="[78]"></a>STM32F4::notify()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN7STM32F46notifyEv))
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
</UL>
<P><STRONG><a name="[77]"></a>STM32F4::freeACK()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN7STM32F47freeACKEv))
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
</UL>
<P><STRONG><a name="[75]"></a>STM32F4::freeMSG()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN7STM32F47freeMSGEv))
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
</UL>
<P><STRONG><a name="[76]"></a>STM32F4::lockACK()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN7STM32F47lockACKEv))
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
</UL>
<P><STRONG><a name="[74]"></a>STM32F4::lockMSG()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.o(i._ZN7STM32F47lockMSGEv))
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
</UL>
<P><STRONG><a name="[71]"></a>STM32F4::readall(unsigned char*, unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver.o(i._ZN7STM32F47readallEPhj))
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata__ZTV7STM32F4)
</UL>
<P><STRONG><a name="[a4]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_BMP1
</UL>

<P><STRONG><a name="[1cc]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c0]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[8c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HardDriver::displayLog(const char*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startLocalNavExample()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRecvCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiger_sniffing()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nymth()
</UL>

<P><STRONG><a name="[2c1]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2c2]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1ce]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c3]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[111]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activate(DJI::onboardSDK::ActivateData*, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendToMobile(unsigned char*, unsigned char, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::setMovementControl(unsigned char, float, float, float, float)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::recvReqData(DJI::onboardSDK::Header*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::decodeACKStatus(unsigned short)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendInterface(DJI::onboardSDK::Command*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::ackInterface(DJI::onboardSDK::Ack*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setFrequencyCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendToMobileCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::setControlCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::parseDroneVersionInfo(unsigned char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::activateCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocACK(unsigned short, unsigned short)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::allocSession(unsigned short, unsigned short)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::sendData(unsigned char*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::decodeMissionStatus(unsigned char)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::readCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::startCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::missionCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::armCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::taskCallback(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::appHandler(DJI::onboardSDK::Header*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::encrypt(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::storeData(DJI::onboardSDK::SDKFilter*, unsigned char)
</UL>

<P><STRONG><a name="[2c4]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2c5]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1d3]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[81]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_harddriver.o(.constdata__ZTVN3DJI10onboardSDK10HardDriverE)
</UL>
<P><STRONG><a name="[15f]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerianAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerAngle(DJI::onboardSDK::QuaternionData)
</UL>

<P><STRONG><a name="[1d8]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[160]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerianAngle(DJI::onboardSDK::QuaternionData)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toEulerAngle(DJI::onboardSDK::QuaternionData)
</UL>

<P><STRONG><a name="[16f]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toQuaternion(DJI::EulerianAngle)
</UL>

<P><STRONG><a name="[170]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::toQuaternion(DJI::EulerianAngle)
</UL>

<P><STRONG><a name="[1db]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1dd]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1d5]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1dc]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1d0]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1d9]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1d2]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[1d4]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2c6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2c7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2c8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1d1]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1da]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1d6]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1c4]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1d7]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt_full.o(i.sqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[82]"></a>__sti___8_main_cpp_BMP1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sti___8_main_cpp_BMP1 &rArr; DJI::onboardSDK::CoreAPI::CoreAPI(DJI::onboardSDK::HardDriver*, bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*) &rArr; DJI::onboardSDK::CoreAPI::init(DJI::onboardSDK::HardDriver*, DJI::onboardSDK::CallBackHandler, bool) &rArr; DJI::onboardSDK::CoreAPI::setup()
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::VirtualRC::VirtualRC(DJI::onboardSDK::CoreAPI*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::CoreAPI::CoreAPI(DJI::onboardSDK::HardDriver*, bool, void(*)(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Header*, void*), void*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::Flight::Flight(DJI::onboardSDK::CoreAPI*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[83]"></a>__sti___12_HotPoint_cpp_hotpoint</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hotpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = __sti___12_HotPoint_cpp_hotpoint &rArr; DJI::onboardSDK::HotPoint::HotPoint(DJI::onboardSDK::CoreAPI*) &rArr; DJI::onboardSDK::HotPoint::initData() &rArr; DJI::onboardSDK::CoreAPI::getBroadcastData() const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI::onboardSDK::HotPoint::HotPoint(DJI::onboardSDK::CoreAPI*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hotpoint.o(.init_array)
</UL>
<P><STRONG><a name="[bb]"></a>hex2Float(unsigned char, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, receive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler(DJI::onboardSDK::CoreAPI*, DJI::onboardSDK::Flight*)
</UL>

<P><STRONG><a name="[84]"></a>__sti___11_Receive_cpp_88bc3a46</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, receive.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> receive.o(.init_array)
</UL>
<P><STRONG><a name="[c3]"></a>gps_convert_ned_rad(float&, float&, float, float, float, float)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, localnavigation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gps_convert_ned_rad(float&, float&, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_convert_ned(DJI::onboardSDK::PositionData, DJI::onboardSDK::PositionData)
</UL>

<P><STRONG><a name="[c5]"></a>gps_convert_ned(DJI::onboardSDK::PositionData, DJI::onboardSDK::PositionData)</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, localnavigation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gps_convert_ned(DJI::onboardSDK::PositionData, DJI::onboardSDK::PositionData) &rArr; gps_convert_ned_rad(float&, float&, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_convert_ned_rad(float&, float&, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCurveFollowing()
</UL>

<P><STRONG><a name="[ea]"></a>CheckITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[f8]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f6]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f4]"></a>TI2_Config</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f2]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[103]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1de]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1cd]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1e0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1df]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[69]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
